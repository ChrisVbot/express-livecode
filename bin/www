#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var session = require('../app').session;
var sharedsession = require("express-socket.io-session");

var debug = require('debug')('express-app:server');
var http = require('http');
var db = require("../models/index");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require("socket.io")(server);
io.use(sharedsession(session));

io.on("connection", function(socket) {

    socket.on('JOIN', function(documentId){
      var user_id = socket.handshake.session.user_id
      var roomToJoin = documentId.toString();
      db.Document.findById(documentId)
        .then(function(doc){
          if(doc && doc.owned_id === user_id){
            socket.broadcast.to(roomToJoin).emit('SAVE');
            socket.join(roomToJoin);
            socket.handshake.session.can_write = true;
            console.log("User join read/write for room", documentId);
          } else {
            socket.join("VIEWONLY"+documentId);
            socket.emit("STOP");
            socket.broadcast.to(roomToJoin).emit('SAVE');
            console.log("User joined read only for room", documentId);
          };
        });

    });

    socket.on('EDIT',function(data){
      var room = data.room;
      var viewOnlyRoom = "VIEWONLY" + data.room
      if(socket.handshake.session.can_write === true){
        socket.broadcast.to(data.room).emit('EDIT', data.event);
        io.to(viewOnlyRoom).emit('EDIT', data.event);
      };
    });

    socket.on('RELOAD', function(data){
      var room = data.room;
      var viewOnlyRoom = "VIEWONLY" + data.room
      if(socket.handshake.session.can_write === true){
        socket.broadcast.to(data.room).emit('RELOAD');
        io.to(viewOnlyRoom).emit('RELOAD');
      };
    });

    socket.on('disconnect', function(data){
      if (socket.handshake.session.can_write) {
        delete socket.handshake.session.can_write;
      }
    });

})   


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
